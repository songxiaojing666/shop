<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"  
    xmlns:security="http://www.springframework.org/schema/security" 
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xsi:schemaLocation="  
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/security   
        http://www.springframework.org/schema/security/spring-security-3.2.xsd  
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/data/jpa   
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd  
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
        http://www.springframework.org/schema/mvc   
    	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">
        <!-- @ResponseBody起作用?
	    1.首先在pom.xml中导入jackson的依赖
	    2.开启注解驱动 -->
        <mvc:annotation-driven/>
        
    <!-- 对项目中的所有类进行扫描以完成Bean创建并进行自动注入。  
           支持 @Controller、@Service 以及 @Repository 和 @Component -->
	<!-- 扫描项目中com.fh.shop.controller包下所有的类，从而使类中的@Controller注解生效 -->
    <!-- 控制层action -->
    <context:component-scan base-package="com.fh.shop.backend.controller"/>
    <!--扫描接口的action层注解-->
    <context:component-scan base-package="com.fh.shop.backend.controller.api"/>
	

	<!--
        jsp视图解析器，对模型视图名称的解析，即在模型视图名称添加前后缀
        如/view/welcome.jsp对应的视图名就是：welcome
        这个类在视图解析器链中一定要定义在其他视图的后面，因为它始终会返回一个视图
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"/><!-- 前缀的路径 -->
        <property name="suffix" value=".jsp"/><!-- 后缀 -->
    </bean>
    
    <!-- 【扫描@DateTimeFormat注解】加载@DateTimeFormat-->
    <mvc:annotation-driven conversion-service="conversionService"/>
    
    <bean id="conversionService"
          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
     </bean>
     
     <!-- 配置Aop -->
     <!--InfoAspect infoaspect=new com.fh.shop.backend.aspect.InfoAspect-->
     <!--实例化对象 -->
     <bean id="logAspect" class="com.fh.shop.backend.controller.aspect.LogAspect"></bean>
     <aop:config>
        <!-- 切面【指定的是非核心业务逻辑类】 -->
        <aop:aspect ref="logAspect">
           <!--切点  -->
           <aop:pointcut expression="execution(* com.fh.shop.backend.controller..*.add*(..))||execution(* com.fh.shop.backend.controller..*.del*(..))||execution(* com.fh.shop.backend.controller..*.update*(..))||execution(* com.fh.shop.backend.controller..*.log*(..))" id="pointcut"/>
           <!--方位为环绕功能最强大  【method="aspect"是非核心业务逻辑类的方法名】-->
           <aop:around method="logAspect" pointcut-ref="pointcut"/>
        </aop:aspect>
     </aop:config>

     <!-- 文件上传 -->
      <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize">
            <value>5242880</value>
        </property>
      </bean>

         <!--SpringMvc 拦截器 -->
	   <mvc:interceptors>
	     <!-- 可以有多个拦截器进行拦截【有顺序执行】 -->
         <mvc:interceptor>
         <!--【/**拦截所有匹配路径】  但是后缀名为.jsp的不进行拦截因为没有交给SpringMvc进行管理,在这个项目中以.jhtml的后缀名拦截-->
              <mvc:mapping path="/**"/>
              <!-- 拦截器的路径 -->
              <bean id="loginInterceptor" class="com.fh.shop.backend.controller.interceptor.LoginInterceptor">
              </bean>
          </mvc:interceptor>
    </mvc:interceptors>
    

	
     
</beans>